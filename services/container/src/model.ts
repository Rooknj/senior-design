import { Document, Model, Schema, model } from 'mongoose'


interface Deployment extends Document {
    // metadata
    deploymentId: string // unique indexed generated by this service
    networkId: string // indexed (non-unique) given to deployment by Network (a network can have multiple deployments - some of which can be removed)
    ownerId: string
    removed: boolean
    createdAt: Date,
    updatedAt: Date

    // configuration
    replicas: number // we only need 1 of each machine
    machines: DeploymentMachine[] // List of Machines that are deployed
}

interface DeploymentMachine extends Document {
    containerId: string // unique id generated by kubernetes for this container
    machineId: string // unique id generated given to this service by the network service
}

// A 1:1 schema representing a Deployment
const DeploymentSchema: Schema = new Schema({
    deploymentId: { type: String, required: true, unique: true },
    networkId: { type: String, required: true },
    ownerId: { type: String, required: true },
    removed: { type: Boolean, required: true, default: false },
    replicas: { type: Number, required: true, default: 1 },
    machines: [
        {
            containerId: { type: String, required: true, index: true, unique: true }, // index!
            machineId: { type: String, required: true, index: true, unique: true } // index!
        }
    ],
    createdAt: Date,
    updatedAt: Date
}, { _id: false })

// Create a unique compound index (key) for DeploymentSchema
// consisting of the `deploymentId` and `networkId`
DeploymentSchema.index({ deploymentId: 1, networkId: -1 }, { unique: true })


/**
 * Update timestamps on every Object save
 */
DeploymentSchema.pre<Deployment>('save', function(next) {
    const now = new Date()

    if (!this.createdAt) {
        this.createdAt = now
    }

    this.updatedAt = now

    next()
})

// let UserModel: Model<Deployment> = model<Deployment>('User', UserSchema)

export let DeploymentModel: Model<Deployment> = model<Deployment>('Deployment', DeploymentSchema)

// var user = new UserModel({name: 'Jane'})
// user.username     // IUser properties are available
// user.save()       // mongoose Document methods are available

// UserModel.findOne({}, (err: any, user: IUser) => {
//   user.username;   // IUser properties are available
//   user.save();     // mongoose Document methods are available
// });
